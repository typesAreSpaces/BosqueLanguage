//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

namespace NSTest;

entrypoint function lsize(): Int {
    return List<Any>@{}->size() + List<Int>@{1}->size() + List<Any>@{none, true}->size();
}

entrypoint function lvals(): Int {
    let lint = List<Int>@{1, 2, 3};
    let lmixed = List<Int | String | None>@{1, "one", none};
    return lmixed->get(1) == none ? 5 : lint->get(1);
}

entrypoint function lpush(): Int {
    let lint = List<Int>@{1, 2, 3};
    let lup = lint->push(4);
    return lup->get(3);
}

entrypoint function lset(): Int {
    let lint = List<Int>@{1, 2, 3};
    let lup = lint->set(1, 5);
    return lup->get(1);
}

function restArgListSimple<T>(...args: List<T>): T {
    return args->get(args->size() - 1);
}

entrypoint function restCallSimpleArgsList(): Int {
    return restArgListSimple<Int>(1, 1, 2);
}
/*
function argListMixed(v: Bool, ...arg: List<Int>): List<Int> {
    return v ? arg : List<Int>{ 1 };
}

entrypoint function restCallMixedList1(): Int {
    return argListMixed(true, 4, ...List<Int>{ 1, 2, 3 })->get(1);
}

entrypoint function restCallMixedList2(): Int {
    return argListMixed(4, v=true, ...List<Int>{ 1, 2, 3 })->get(1);
}
*/
entrypoint function lfilter(): Int {
    let lint = List<Int>@{1, 2, 3};
    let lup = lint->filter<Int>(fn(x) => x > 1);
    return lup->get(0);
}

entrypoint function lmap(): Int {
    let lint = List<Int>@{1, 2, 3};
    let lup = lint->map<Int>(fn(x) => Math::mult(x, 3));
    return lup->get(1);
}

entrypoint function latbounds(i: Int): Int {
    let lint = List<Int>@{1, 3};
    return lint->get(i);
}

entrypoint function lpushok(i: Int): Int {
    let lint = List<Int>@{1, 3};
    return lint->push(i)->get(1);
}

entrypoint function lallyes(): Bool {
    return List<Int>@{1, 3}->all(fn(x) => x > 0);
}

entrypoint function lallno(): Bool {
    return List<Int>@{1, -1}->all(fn(x) => x > 0);
}

entrypoint function loftype(): Int {
    return List<Int?>@{1, none}->ofType<Int>()->get(0) + List<Int | String>@{3, "ok"}->ofType<Int>()->get(0);
}

entrypoint function lsum(): Int {
    return List<Int>@{1, 3}->sum();
}
