//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

namespace NSTest;

entrypoint function empty(): Int {
    return Set<KeyType>@{}->size() + Set<Int>@{1}->size() + Set<Int>@{1, 1, 1}->size() + Set<Int>@{1, 2}->size();
}


function restArgSetSimple<T>(...arg: Set<T>): Int {
    return arg->size();
}

entrypoint function restCallSimpleArgsSet(): Int {
    return restArgSetSimple<Int>(1, 2);
}

entrypoint function restCallOverlapArgsSet(): Int {
    return restArgSetSimple<Int>(1, 1);
}

/*
function restArgSetSimple<T>(...arg: Set<T>): Int {
    return arg->size();
}

entrypoint function restCallSimpleArgsSet(): Int {
    return restArgSetSimple<Int>(4, ...List<Int>{ 1, 2, 3 });
}

entrypoint function restCallOverlapArgsSet(): Int {
    return restArgSetSimple<Int>(2, ...List<Int>{ 1, 2, 3 });
}
*/
function hasop(x: Int): Bool {
    return Set<Int>@{1, 5}->has(x);
}

entrypoint function hasCyes(): Bool {
    return hasop(5);
}

entrypoint function hasCno(): Bool {
    return hasop(2);
}

function insertOp(x: Int): Int {
    let sint = Set<Int>@{1, 2, 3};
    let sup = sint->insert(x);

    check sup->has(x);
    return sup->size();
}

entrypoint function insertCyes(): Int {
    return insertOp(5);
}

entrypoint function insertCno(): Int {
    return insertOp(2);
}

function removeOp(x: Int): Int {
    let sint = Set<Int>@{1, 2, 3};
    let sup = sint->remove(x);

    check !sup->has(x);
    return sup->size();
}

entrypoint function removeCyes(): Int {
    return removeOp(2);
}

entrypoint function removeCno(): Int {
    return removeOp(5);
}

entrypoint function puzzle(x: Int, y: Int): Int {
    let sint = Set<Int>@{1, 2, y};

    check !(sint->size() == 2 && sint->insert(x)->has(11));
    return 0;
}