//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

namespace NSTest;

////
//Misc Defs

function nmin(d: Int, ...args: List<Int>): Int {
    return args.defaultMin(default=d);
}

function np(p1: Int, p2: Int): {x: Int, y: Int} {
    return {x=p1, y=p2};
}

function absImpl(x: Int): Int {
    var sign = 1; //declare updatable variable with initial value
    if(x < 0) {
        sign = -1; //update the variable
    }

    return x * sign;
}

function nextCtr(ref ctr: Int): Int {
    let res = ctr;
    ctr = ctr + 1;
    return res;
}

////
//Tests

entrypoint function abs(x: Int): Int {
    return absImpl(x);
}

entrypoint function absC(): Int {
    return absImpl(1) + absImpl(-1);
}

entrypoint function minDirect(): Int {
    return nmin(-1, 1, 2, 3);
}

entrypoint function minExpand(): Int {
    let t = List<Int>@{1, 2, 3};
    return nmin(-1, ...t);
}

entrypoint function nameDirect(): Int {
    let pa = np(1, 2);
    let na = np(p2=2, 1);
    return pa.x + na.y;
}

entrypoint function nameExpand(): Int {
    let r = {p1=1, p2=2};
    let rr = np(...r);
    return rr.x + rr.y;
}

entrypoint function refthread(): Int {
    var ctr = 0;
    let v1 = nextCtr(ref ctr);
    let v2 = nextCtr(ref ctr);

    check ctr == 2;
    check v1 == 0;
    check v2 == 1;

    return 0;
}

entrypoint function bulkaccesstuple(): [Int, Int] {
    let l = [7, 8, 9];
    return l.[0, 2];
}

entrypoint function bulkaccesrecord(): {f: Int, h: None} {
    let r = {f=7, g=8};
    return r.{f, h};
}

entrypoint function bulkacceschk(): Int {
    let l = [7, 8, 9];
    let r = {f=7, g=8};

    let lp = l.[0, 2];
    check lp.0 == 7;
    check lp.1 == 9;

    let rp = r.{f, h};
    check rp.f == 7;
    check rp.h == none;

    return 0;
}

entrypoint function bulkupdaterecord1(): {f: Int, g: Int, h: Int} {
    let x = {f=1, g=2, h=3};
    return x.update(f=-1, g=-2);
}

entrypoint function bulkupdaterecord2(): {f: Int, g: Int, h: Int} {
    let r = {f=7, g=8};
    return r.update(f=5, h=1);
}

entrypoint function bulkupdatechk(): Int {
    let x = {f=1, g=2, h=3};
    let xu = x.update(f=-1, g=-2);
    check xu.f == -1;
    check xu.g == -2;
    check xu.h == 3; 

    let r = {f=7, g=8};
    let xr = r.update(f=5, h=1);
    check xr.f == 5;
    check xr.g == 8;
    check xr.h == 1;

    return 0;
}

entrypoint function bulkmergetuple(): [Int, Int, Int, Int, Int] {
    let l = [7, 8, 9];
    return l.merge([5, 6]);
}

entrypoint function bulkmergerecord(): {f: Int, g: Int, h: Int} {
    let r = {f=7, g=8};
    return r.merge({f=5, h=1});
}

entrypoint function bulkmergechk(): Int {
    let l = [7, 8, 9];
    let r = {f=7, g=8};

    let lm = l.merge([5, 6]);
    check lm.0 == 7;
    check lm.2 == 9;
    check lm.3 == 5;
    check lm.4 == 6;

    let rm = r.merge({f=5, h=1});
    check rm.f == 5;
    check rm.g == 8;
    check rm.h == 1;

    return 0;
}
