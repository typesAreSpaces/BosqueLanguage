//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

//
//This is a bosque test/benchmark for a simple max function.
//Expected output is: 20
//

namespace NSMain;

function max0(x: [Int, Int], y: Int): Int
{
    var z = [1, 2, 3];
    var z_1 = z.0;
    var z2 = [1, 2, 3];
    var z2_1 = z2.1;

    if(x.0 >= y){
        return x.0;
    }
    else{
        return y;
    }
}

function identityUnion(x : Int | None | String | Bool) : Int | None | String | Bool {
    return x;
}

function identityOpenTuple(x : [String, ...]): [String, ...] {
    return x;
}

function identityTupleNoneable(x : [Int, Bool?]) : [Int, Bool?] {
    return x;
}

function identityTupleOptional(x : [Int, Bool, Int, ?:None, ?:Bool, ...]) : [Int, Bool, Int, ?:None, ?:Bool, ...] {
    return x;
}

function max(x: Int | None, y: Int): Int
    ensures _return_ == x || _return_ == y;
{
    if (x == none) {
	   return y;   
    } 
    else {
        if(x >= y){
            return x;
        }
        else{
            return y;
        }
    }
}

function maxx(x: Int) : Int? {
    if (x > 0){
        return x; 
    }
    else{
        return none;
    }
}

function max2(x: Int, y: Int): Int
    ensures _return_ == x || _return_ == y;
{
    // Tuple constructor
    var z = [x, y];
    var z1 = z.0;

    if(x >= y){
        return x;
    }
    else{
        return y;
    }
}

function max3(x: [Int, Int]): Int
{
    if(x.0 >= x.1){
        return x.0;
    }
    else{
        return x.1;
    }
}

function max4(x: {f: Int, g: Int}): Int
{
    var aa = [1, 2];
    var y = {h = 1, i = 2};
    var yH = y.h;
            
    if(x.f >= x.g){
        return x.f;
    }
    else{
        return x.g;
    }
}

function max5(x : Int, y : Int) : Int
{
    var! internal_result : Int;
    if(x >= y){
        internal_result = x;
    }
    else{
        internal_result = y;
    }
    return internal_result;
}

entity PlayerMark provides Parsable {
    field mark: String;

    override static tryParse(str: String): PlayerMark | None {
        return (str == "x" || str == "o") ? PlayerMark{ mark=str } : none;
    }
}

entrypoint function main(): Int {

    var string_test = "string_test";
    var player1 = PlayerMark'x';
    var n = none;
    var xTuple2 = [10, 30];
    var x2 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, [1, 1], "hello", false, true];
    // var xRecord = {f = 1, g = 2};
    // var xProjection = xRecord.f;
    // var xRecord2 = {g = 10, f = 20};
    // var xProjection2 = xRecord2.f;
    var y = 20;
    var y2 = identityUnion(y);
    var z = max(xTuple2.0, y);
    var z_max_func_repeated = max(z, y);
    var z2 = identityTupleOptional([1, true, 2]);
    var z3 = identityOpenTuple(["hello"]);
    // var z4 = maxx(3); // Problematic
    var zTuple2 = [xTuple2, y];
    
    return z;
}
