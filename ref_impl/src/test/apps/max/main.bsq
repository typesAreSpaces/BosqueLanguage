//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

//
//This is a bosque test/benchmark for a simple max function.
//Expected output is: 20
//

namespace NSMain;

function max0(x: [Int, Int], y: Int): Int
{
    var z = [1, 2, 3];
    var z_1 = z.0;
    var z2 = [1, 2, 3];
    var z2_1 = z2.1;

    if(x.0 >= y){
        return x.0;
    }
    else{
        return y;
    }
}

function identityUnion(x : Int | None | Bool) : Int | None | Bool {
    return x;
}

function identity(x : String): String {
    return x;
}

function max(x: Int | None, y: Int): Int
    ensures _return_ == x || _return_ == y;
{
    if (x == none) {
	   return y;   
    } 
    else {
        if(x >= y){
            return x;
        }
        else{
            return y;
        }
    }
}

function max2(x: Int, y: Int): Int
    ensures _return_ == x || _return_ == y;
{
    // Tuple constructor
    var z = [x, y];
    var z1 = z.0;

    // Record constructor
    // var w = {f = 23234, g = true};

    // Lambda constructor
    // var lam = fn() : Int => 1;
    // var lam2 = fn(ahh : Int) : Int => ahh;
    // var lam3 = fn(ahh: Int, ahh2: Int, x : Int) : Int => { return x; };

    if(x >= y){
        return x;
    }
    else{
        return y;
    }
}

function max3(x: [Int, Int]): Int
{
    if(x.0 >= x.1){
        return x.0;
    }
    else{
        return x.1;
    }
}

function max4(x: {f: Int, g: Int}): Int
{
    var aa = [1, 2];
    var y = {h = 1, i = 2};
    var yH = y.h;
            
    if(x.f >= x.g){
        return x.f;
    }
    else{
        return x.g;
    }
}

function max5(x : Int, y : Int) : Int
{
    var! internal_result : Int;
    if(x >= y){
        internal_result = x;
    }
    else{
        internal_result = y;
    }
    return internal_result;
}

// entity Baz {
//     field x : Int;
//     factory identity(x: Int): {f : Int} {
//         return @{f = x};
//     }
// }

entrypoint function main(): Int {
    var x = [10, 10];
    var x2 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, [1, 1], "hello", false, true];
    var x3 = {f = 1, g = 2};
    var x4 = x3.f;
    var x5 = {g = 10, f = 20};
    var x6 = x5.f;
    var y = 20;
    var y2 = identityUnion(y);
    
    // var z = max0(x, y);
    var z = max(x.0, y);
    
    

    var zTuple = [x, y];
    // var zBaz = Baz@identity(1); 
    // var maxTuple = max3(zTuple);

    // var zRecord = {f = x, g = y};
    // var maxRecord = max4(zRecord);

    // var another_z = max5(x, y);
    
    return z;
}
