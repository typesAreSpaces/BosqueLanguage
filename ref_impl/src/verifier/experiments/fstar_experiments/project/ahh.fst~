module Ahh

type aa = 
| Nila
| A : (list aa) -> aa

type bb = 
| Nilb
| B : (list bb) -> bb

val map : ('a -> Tot 'b) -> list 'a -> list 'b 
let rec map f x = match x with
| Nil -> Nil
| Cons y ys -> Cons (f y) (map f ys) 

val f : aa -> Tot bb
let rec f x = match x with
| Nila -> Nilb
| A x -> B (map f x)
