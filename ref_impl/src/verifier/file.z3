(declare-fun x () Int)
(declare-fun y () Int)
(declare-fun p (Int Int Int Int Int Int) Bool)
(push)
(assert (p x y x y x y))
(check-sat)
(pop)
(push)
(assert (p x y x y x y))
(check-sat)
(get-model)
(pop)
(declare-fun f (Int Int) Int)
(push)
(assert (forall ((x Int)) (and (p x y x y x y) (forall ((y Int)) (p (f x y) x x y (f x y) x)))))
(check-sat)
(get-model)
(pop)
(declare-fun a () Bool)
(declare-fun b () Bool)
(push)
(assert (not (= (and a b) (not (or (not a) (not b))))))
(check-sat)
(pop)
(declare-fun narda (Bool Int) Bool)
(push)
(assert (narda (p x y x y x y) x))
(check-sat)
(pop)
(declare-sort List_Int_)
(declare-fun z () List_Int_)
(declare-fun g (List_Int_) Bool)
(push)
(assert (g z))
(check-sat)
(get-model)
(pop)
(push)
(assert (g z))
(check-sat)
(get-model)
(pop)
(push)
(assert (p x y x y x y))
(check-sat)
(get-model)
(pop)
(push)
(assert (p x x x x x x))
(check-sat)
(pop)
(push)
(assert (p x x x x x y))
(check-sat)
(pop)
(push)
(assert (p x x x x y x))
(check-sat)
(pop)
(push)
(assert (p x x x y x x))
(check-sat)
(pop)
