(set-option :smt.auto-config false) ; disable automatic self configuration
(set-option :smt.mbqi false) ; disable model-based quantifier instantiation

(declare-sort Term)
(declare-datatypes () ((BType BInt BBool)))

(declare-fun HasType (Term BType) Bool)
(declare-fun BoxInt (Int) Term)
(declare-fun UnboxInt (Term) Int)
(declare-fun BoxBool (Bool) Term)
(declare-fun UnboxBool (Term) Bool)

(assert
 (forall ((@x Int))
	 (! (= (UnboxInt (BoxInt @x)) @x)
	    :pattern ((BoxInt @x))
	    )
	 )
 )

;; (declare-fun op_>= (Term Term) Bool)
;; (assert (forall ((@x Term) (@y Term)) (! (implies (and (HasType @x BInt) (HasType @y BInt)) (= (op_>= @x @y) (>= (UnboxInt @x) (UnboxInt @y)))) :pattern (op_>= @x @y))))
(define-fun op_> ((@x Term) (@y Term)) Term (BoxBool (> (UnboxInt @x) (UnboxInt @y))))
(define-fun op_< ((@x Term) (@y Term)) Term (BoxBool (< (UnboxInt @x) (UnboxInt @y))))
(define-fun op_>= ((@x Term) (@y Term)) Term (BoxBool (>= (UnboxInt @x) (UnboxInt @y))))
(define-fun op_<= ((@x Term) (@y Term)) Term (BoxBool (<= (UnboxInt @x) (UnboxInt @y))))

;;-------------------------------------------
;; Example

(declare-const x Term)
(declare-const y Term)

(define-fun maxTerm ((@x Term) (@y Term)) Term (ite (UnboxBool (op_> @x @y)) @x @y))

(define-const flag Bool true)
(define-const example Bool
  (ite flag
       (UnboxBool (op_>= (maxTerm x y) x))
       (not (UnboxBool (op_>= (maxTerm x y) x)))
       )
  )

(assert example)

(check-sat)
(eval x)
;;-------------------------------------------
