type_expr.ts:288:// TODO: Implement getBosqueType 
type_expr.ts:316:// TODO: Implement getBosqueType 
type_expr.ts:326:// TODO: Implement getBosqueType 
type_expr.ts:336:// TODO: Implement getBosqueType 
type_expr.ts:346:// TODO: Implement getBosqueType 
util.ts:59:  // TODO: Add more `replace operations' if the IR syntax (names)
term_expr.ts:14:    // TODO: Add more reserved words from FStar
translator_bosque_fstar.ts:6:// PRIORITIES:
translator_bosque_fstar.ts:89:    // FIX: This is wrong, because these function should have
translator_bosque_fstar.ts:187:  // TODO: Add more types as needed
translator_bosque_fstar.ts:441:      case MIROpTag.MIRLoadFieldDefaultValue: { // IMPLEMENT:
translator_bosque_fstar.ts:457:        // case MIROpTag.AccessCapturedVariable: { // IMPLEMENT:
translator_bosque_fstar.ts:464:      case MIROpTag.MIRAccessArgVariable: { // IMPLEMENT:
translator_bosque_fstar.ts:468:      case MIROpTag.MIRAccessLocalVariable: { // IMPLEMENT:
translator_bosque_fstar.ts:499:      case MIROpTag.MIRConstructorPrimaryCollectionEmpty: { // IMPLEMENT:
translator_bosque_fstar.ts:525:      case MIROpTag.MIRConstructorPrimaryCollectionCopies: { // IMPLEMENT:
translator_bosque_fstar.ts:529:      case MIROpTag.MIRConstructorPrimaryCollectionMixed: { // IMPLEMENT:
translator_bosque_fstar.ts:552:        // case MIROpTag.ConstructorLambda: { // IMPLEMENT:
translator_bosque_fstar.ts:573:        // case MIROpTag.CallStaticFunction: { // IMPLEMENT:
translator_bosque_fstar.ts:695:      case MIROpTag.MIRProjectFromTypeTuple: { // IMPLEMENT:
translator_bosque_fstar.ts:699:      case MIROpTag.MIRProjectFromTypeRecord: { // IMPLEMENT:
translator_bosque_fstar.ts:703:      case MIROpTag.MIRProjectFromTypeConcept: { // IMPLEMET:
translator_bosque_fstar.ts:722:      case MIROpTag.MIRModifyWithIndecies: { // IMPLEMENT:
translator_bosque_fstar.ts:726:      case MIROpTag.MIRModifyWithProperties: { // IMPLEMENT:
translator_bosque_fstar.ts:730:      case MIROpTag.MIRModifyWithFields: { // IMPLEMENT:
translator_bosque_fstar.ts:743:      case MIROpTag.MIRStructuredExtendTuple: { // IMPLEMENT:
translator_bosque_fstar.ts:747:      case MIROpTag.MIRStructuredExtendRecord: { // IMPLEMENT:
translator_bosque_fstar.ts:751:      case MIROpTag.MIRStructuredExtendObject: { // IMPLEMENT:
translator_bosque_fstar.ts:757:        // case MIROpTag.MIRInvokeKnownTarget: { // IMPLEMENT:
translator_bosque_fstar.ts:763:      case MIROpTag.MIRInvokeVirtualTarget: { // IMPLEMENT:
translator_bosque_fstar.ts:769:        // case MIROpTag.MIRCallLambda: { // IMPLEMENT:
translator_bosque_fstar.ts:807:        // Q: Is still necessary check if the type is either
translator_bosque_fstar.ts:809:        // A: Yes, because that will tell which `operation code` should be used
translator_bosque_fstar.ts:810:        // TODO: Implement the above
translator_bosque_fstar.ts:824:      case MIROpTag.MIRRegAssign: { // IMPLEMENT:
translator_bosque_fstar.ts:828:      case MIROpTag.MIRTruthyConvert: { // IMPLEMENT:
translator_bosque_fstar.ts:854:      case MIROpTag.MIRAbort: { // IMPLEMENT:
translator_bosque_fstar.ts:859:      case MIROpTag.MIRDebug: { // IMPLEMENT:
translator_bosque_fstar.ts:940:      case MIROpTag.MIRIsTypeOf: { // IMPLEMENT:
translator_bosque_fstar.ts:944:        // PRIORITY:
translator_bosque_fstar.ts:945:      case MIROpTag.MIRAccessConstantValue: { // IMPLEMENT:
translator_bosque_fstar.ts:1135:    // TODO: Figure out how to include the following fields:
bosqueTermsFST.ts:11:    // TODO: Keep working here
bosqueTermsFST.ts:265:// TODO: Include case for Strings\n\
bosqueTypesFST.ts:10:// TODO: Include parameter to print extended types
bosqueTypesFST.ts:43:// FIX: The following is incomplete\n\
bosqueTypesFST.ts:45:// FIX: The following is incomplete\n\
bosqueTypesFST.ts:47:// FIX: The following is incomplete\n\
bosqueTypesFST.ts:49:// FIX: The following is incomplete\n\
bosqueTypesFST.ts:51:// FIX: The following is incomplete\n\
